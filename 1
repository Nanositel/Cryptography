class Sequence
  def __init__(self, a, c, m, x0)
    self.a = a
    self.c = c
    self.m = m
    self.x0 = x0


  def generateSequence(self, countToGenerate)
    count = 1
    x = self.x0

    while count = countToGenerate
      print(x)
      x = (self.a  x + self.c) % self.m
      count += 1
  

  def calculation(self)
    count = 1
    length = len(self.convertToBinary(self.x0))
    x = self.x0
    x1 = 0

    countOfOnes = 0
    countOfZeros = 0

    countOfOdd = 0
    countOfEven = 0

    bite = ''

    while True
      x = (self.a  x + self.c) % self.m

      if x == self.x0 or x == x1
        if x == x1
          count -= 1
          length -= len(self.convertToBinary(self.x0))
        break

      count += 1
      length += len(self.convertToBinary(x))

      if count == 2
         x1 = x

    while True
      convertedX = self.convertToBinary(x)
      print(x, convertedX, len(convertedX))

      for char in convertedX
        if len(bite)  7
          bite += char
        elif len(bite) == 7
          bite += char
          print('BITE', bite)
          if bite[-1] == '1'
            countOfOdd += 1
          elif bite[-1] == '0'
            countOfEven += 1
          bite = ''

        if char == '0'
          countOfZeros += 1
        elif char == '1'
          countOfOnes += 1

      x = (self.a  x + self.c) % self.m
      if x == self.x0 or x == x1
        break

    print('Длина периода последовательности ' + str(length))
    print('Количество единиц в битовом представлении ' + str(countOfOnes))
    print('Количество нулей в битовом представлении ' + str(countOfZeros))
    print('Количество чётных в байтовом представлении ' + str(countOfEven))
    print('Количество нечётных в байтовом представлении ' + str(countOfOdd))


  def convertToBinary(self, number)
    binaryNumber = ''

    while number  0
      binaryNumber = str(number % 2) + binaryNumber
      number = number  2

    return binaryNumber


if __name__ == __main__
  n = input('Сколько чисел сгенерировать ')
  sequence = Sequence(117, 34, 213, 23)
  sequence.generateSequence(int(n))
  print('Период')
  sequence.calculation()
