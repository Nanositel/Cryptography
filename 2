class Generator:

  sequence = []

  def __init__(self, reg):
    assert 0 <= reg <= 255
    self.startReg = self.convertToBinary(reg)


  def xor(self, s0, s2, s7):
    newS0 = int(s7)^int(s2)^int(s0)
    return newS0

  
  def generate(self):
    reg = self.startReg

    countOfZeros = 0
    countOfOnes = 0

    countOfEven = 0
    countOfOdd = 0

    bite = []

    while True:
      print('REGISTER', reg)

      newReg = []
      newReg.extend(reg[0:-1])
      newReg.insert(0, self.xor(reg[0], reg[2], reg[7]))
      self.sequence.append(reg[7])
      print('SEQUENCE', self.sequence)
      reg = newReg

      if reg == self.startReg:
        break

    print('\n')
    
    for bit in self.sequence:
      if len(bite) < 7:
        bite.append(bit)
      elif len(bite) == 7:
        bite.append(bit)
        print('BITE', bite)
        if bite[-1] == 1:
          countOfOdd += 1
        elif bite[-1] == 0:
          countOfEven += 1
        bite.clear()

      if bit == 1:
        countOfOnes += 1
      elif bit == 0:
        countOfZeros += 1

    print('\nДлина периода:', len(self.sequence))
    print('Количество единиц в битовом представлении:', str(countOfOnes))
    print('Количество нулей в битовом представлении:', str(countOfZeros))
    print('Количество чётных в байтовом представлении:', str(countOfEven))
    print('Количество нечётных в байтовом представлении:', str(countOfOdd))



  def convertToBinary(self, number):
    binaryNumber = []

    while number > 0:
      binaryNumber.insert(0, number % 2)
      number = number // 2
    
    if len(binaryNumber) < 8:
      count = 8 - len(binaryNumber)
      for _ in range(count):
        binaryNumber.insert(0, 0)

    return binaryNumber


if __name__ == '__main__':
  regNumber = input('Введите число для регистра от 0 до 255: ')
  generator = Generator(int(regNumber))
  generator.generate()
